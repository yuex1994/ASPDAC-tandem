#include <AES.h>
bool AES::decode_AES_READ_KEY() {
uint2_t local_var_1 = 1;
bool local_var_2 = (AES_cmd == local_var_1);
uint16_t local_var_4 = 65296;
bool local_var_5 = (AES_cmdaddr == local_var_4);
bool local_var_6 = (AES_cmdaddr > local_var_4);
bool local_var_7 = (local_var_5 | local_var_6);
bool local_var_8 = (local_var_2 & local_var_7);
uint16_t local_var_9 = 65312;
bool local_var_10 = (AES_cmdaddr < local_var_9);
bool local_var_11 = (local_var_8 & local_var_10);
auto& univ_var_26 = local_var_11;
return univ_var_26;
}
void AES::update_AES_READ_KEY() {
auto AES_aes_address_nxt_holder = AES_aes_address;
auto AES_aes_key_nxt_holder = AES_aes_key;
auto AES_aes_length_nxt_holder = AES_aes_length;
uint16_t local_var_4 = 65296;
uint16_t local_var_5 = (AES_cmdaddr - local_var_4);
uint16_t local_var_6 = 15;
bool local_var_7 = (local_var_5 == local_var_6);
auto local_var_8_shifted = AES_aes_key >> 120;
auto local_var_8_mask = AES_aes_key;
local_var_8_mask = (1 << (127 - 120 + 1)) - 1;
local_var_8_mask &= local_var_8_shifted;
uint8_t local_var_8 = boost::numeric_cast<uint8_t>(local_var_8_mask);
uint16_t local_var_9 = 65296;
uint16_t local_var_10 = (AES_cmdaddr - local_var_9);
uint16_t local_var_11 = 14;
bool local_var_12 = (local_var_10 == local_var_11);
auto local_var_13_shifted = AES_aes_key >> 112;
auto local_var_13_mask = AES_aes_key;
local_var_13_mask = (1 << (119 - 112 + 1)) - 1;
local_var_13_mask &= local_var_13_shifted;
uint8_t local_var_13 = boost::numeric_cast<uint8_t>(local_var_13_mask);
uint16_t local_var_14 = 65296;
uint16_t local_var_15 = (AES_cmdaddr - local_var_14);
uint16_t local_var_16 = 13;
bool local_var_17 = (local_var_15 == local_var_16);
auto local_var_18_shifted = AES_aes_key >> 104;
auto local_var_18_mask = AES_aes_key;
local_var_18_mask = (1 << (111 - 104 + 1)) - 1;
local_var_18_mask &= local_var_18_shifted;
uint8_t local_var_18 = boost::numeric_cast<uint8_t>(local_var_18_mask);
uint16_t local_var_19 = 65296;
uint16_t local_var_20 = (AES_cmdaddr - local_var_19);
uint16_t local_var_21 = 12;
bool local_var_22 = (local_var_20 == local_var_21);
auto local_var_23_shifted = AES_aes_key >> 96;
auto local_var_23_mask = AES_aes_key;
local_var_23_mask = (1 << (103 - 96 + 1)) - 1;
local_var_23_mask &= local_var_23_shifted;
uint8_t local_var_23 = boost::numeric_cast<uint8_t>(local_var_23_mask);
uint16_t local_var_24 = 65296;
uint16_t local_var_25 = (AES_cmdaddr - local_var_24);
uint16_t local_var_26 = 11;
bool local_var_27 = (local_var_25 == local_var_26);
auto local_var_28_shifted = AES_aes_key >> 88;
auto local_var_28_mask = AES_aes_key;
local_var_28_mask = (1 << (95 - 88 + 1)) - 1;
local_var_28_mask &= local_var_28_shifted;
uint8_t local_var_28 = boost::numeric_cast<uint8_t>(local_var_28_mask);
uint16_t local_var_29 = 65296;
uint16_t local_var_30 = (AES_cmdaddr - local_var_29);
uint16_t local_var_31 = 10;
bool local_var_32 = (local_var_30 == local_var_31);
auto local_var_33_shifted = AES_aes_key >> 80;
auto local_var_33_mask = AES_aes_key;
local_var_33_mask = (1 << (87 - 80 + 1)) - 1;
local_var_33_mask &= local_var_33_shifted;
uint8_t local_var_33 = boost::numeric_cast<uint8_t>(local_var_33_mask);
uint16_t local_var_34 = 65296;
uint16_t local_var_35 = (AES_cmdaddr - local_var_34);
uint16_t local_var_36 = 9;
bool local_var_37 = (local_var_35 == local_var_36);
auto local_var_38_shifted = AES_aes_key >> 72;
auto local_var_38_mask = AES_aes_key;
local_var_38_mask = (1 << (79 - 72 + 1)) - 1;
local_var_38_mask &= local_var_38_shifted;
uint8_t local_var_38 = boost::numeric_cast<uint8_t>(local_var_38_mask);
uint16_t local_var_39 = 65296;
uint16_t local_var_40 = (AES_cmdaddr - local_var_39);
uint16_t local_var_41 = 8;
bool local_var_42 = (local_var_40 == local_var_41);
auto local_var_43_shifted = AES_aes_key >> 64;
auto local_var_43_mask = AES_aes_key;
local_var_43_mask = (1 << (71 - 64 + 1)) - 1;
local_var_43_mask &= local_var_43_shifted;
uint8_t local_var_43 = boost::numeric_cast<uint8_t>(local_var_43_mask);
uint16_t local_var_44 = 65296;
uint16_t local_var_45 = (AES_cmdaddr - local_var_44);
uint16_t local_var_46 = 7;
bool local_var_47 = (local_var_45 == local_var_46);
auto local_var_48_shifted = AES_aes_key >> 56;
auto local_var_48_mask = AES_aes_key;
local_var_48_mask = (1 << (63 - 56 + 1)) - 1;
local_var_48_mask &= local_var_48_shifted;
uint8_t local_var_48 = boost::numeric_cast<uint8_t>(local_var_48_mask);
uint16_t local_var_49 = 65296;
uint16_t local_var_50 = (AES_cmdaddr - local_var_49);
uint16_t local_var_51 = 6;
bool local_var_52 = (local_var_50 == local_var_51);
auto local_var_53_shifted = AES_aes_key >> 48;
auto local_var_53_mask = AES_aes_key;
local_var_53_mask = (1 << (55 - 48 + 1)) - 1;
local_var_53_mask &= local_var_53_shifted;
uint8_t local_var_53 = boost::numeric_cast<uint8_t>(local_var_53_mask);
uint16_t local_var_54 = 65296;
uint16_t local_var_55 = (AES_cmdaddr - local_var_54);
uint16_t local_var_56 = 5;
bool local_var_57 = (local_var_55 == local_var_56);
auto local_var_58_shifted = AES_aes_key >> 40;
auto local_var_58_mask = AES_aes_key;
local_var_58_mask = (1 << (47 - 40 + 1)) - 1;
local_var_58_mask &= local_var_58_shifted;
uint8_t local_var_58 = boost::numeric_cast<uint8_t>(local_var_58_mask);
uint16_t local_var_59 = 65296;
uint16_t local_var_60 = (AES_cmdaddr - local_var_59);
uint16_t local_var_61 = 4;
bool local_var_62 = (local_var_60 == local_var_61);
auto local_var_63_shifted = AES_aes_key >> 32;
auto local_var_63_mask = AES_aes_key;
local_var_63_mask = (1 << (39 - 32 + 1)) - 1;
local_var_63_mask &= local_var_63_shifted;
uint8_t local_var_63 = boost::numeric_cast<uint8_t>(local_var_63_mask);
uint16_t local_var_64 = 65296;
uint16_t local_var_65 = (AES_cmdaddr - local_var_64);
uint16_t local_var_66 = 3;
bool local_var_67 = (local_var_65 == local_var_66);
auto local_var_68_shifted = AES_aes_key >> 24;
auto local_var_68_mask = AES_aes_key;
local_var_68_mask = (1 << (31 - 24 + 1)) - 1;
local_var_68_mask &= local_var_68_shifted;
uint8_t local_var_68 = boost::numeric_cast<uint8_t>(local_var_68_mask);
uint16_t local_var_69 = 65296;
uint16_t local_var_70 = (AES_cmdaddr - local_var_69);
uint16_t local_var_71 = 2;
bool local_var_72 = (local_var_70 == local_var_71);
auto local_var_73_shifted = AES_aes_key >> 16;
auto local_var_73_mask = AES_aes_key;
local_var_73_mask = (1 << (23 - 16 + 1)) - 1;
local_var_73_mask &= local_var_73_shifted;
uint8_t local_var_73 = boost::numeric_cast<uint8_t>(local_var_73_mask);
uint16_t local_var_74 = 65296;
uint16_t local_var_75 = (AES_cmdaddr - local_var_74);
uint16_t local_var_76 = 1;
bool local_var_77 = (local_var_75 == local_var_76);
auto local_var_78_shifted = AES_aes_key >> 8;
auto local_var_78_mask = AES_aes_key;
local_var_78_mask = (1 << (15 - 8 + 1)) - 1;
local_var_78_mask &= local_var_78_shifted;
uint8_t local_var_78 = boost::numeric_cast<uint8_t>(local_var_78_mask);
auto local_var_79_shifted = AES_aes_key >> 0;
auto local_var_79_mask = AES_aes_key;
local_var_79_mask = (1 << (7 - 0 + 1)) - 1;
local_var_79_mask &= local_var_79_shifted;
uint8_t local_var_79 = boost::numeric_cast<uint8_t>(local_var_79_mask);
auto local_var_80 = (local_var_77) ? local_var_78 : local_var_79;
auto local_var_81 = (local_var_72) ? local_var_73 : local_var_80;
auto local_var_82 = (local_var_67) ? local_var_68 : local_var_81;
auto local_var_83 = (local_var_62) ? local_var_63 : local_var_82;
auto local_var_84 = (local_var_57) ? local_var_58 : local_var_83;
auto local_var_85 = (local_var_52) ? local_var_53 : local_var_84;
auto local_var_86 = (local_var_47) ? local_var_48 : local_var_85;
auto local_var_87 = (local_var_42) ? local_var_43 : local_var_86;
auto local_var_88 = (local_var_37) ? local_var_38 : local_var_87;
auto local_var_89 = (local_var_32) ? local_var_33 : local_var_88;
auto local_var_90 = (local_var_27) ? local_var_28 : local_var_89;
auto local_var_91 = (local_var_22) ? local_var_23 : local_var_90;
auto local_var_92 = (local_var_17) ? local_var_18 : local_var_91;
auto local_var_93 = (local_var_12) ? local_var_13 : local_var_92;
auto local_var_94 = (local_var_7) ? local_var_8 : local_var_93;
auto local_var_94_nxt_holder = local_var_94;
AES_aes_address = AES_aes_address_nxt_holder;
AES_aes_key = AES_aes_key_nxt_holder;
AES_aes_length = AES_aes_length_nxt_holder;
AES_outdata = local_var_94_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "READ_KEY state updates:" << std::endl;
instr_update_log << "    AES_aes_address => " << std::hex << "0x" << AES_aes_address << std::endl; 
instr_update_log << "    AES_aes_key => " << std::hex << "0x" << AES_aes_key << std::endl; 
instr_update_log << "    AES_aes_length => " << std::hex << "0x" << AES_aes_length << std::endl; 
instr_update_log << "    AES_outdata => " << std::hex << "0x" << AES_outdata << std::endl; 
instr_update_log << std::endl;
#endif
}
