#include <riscv.h>
bool riscv::decode_riscv_JALR() {
auto local_var_1_shifted = riscv_inst >> 0;
auto local_var_1_mask = riscv_inst;
local_var_1_mask = (1 << (6 - 0 + 1)) - 1;
local_var_1_mask &= local_var_1_shifted;
uint7_t local_var_1 = boost::numeric_cast<uint7_t>(local_var_1_mask);
uint7_t local_var_2 = 103;
bool local_var_3 = (local_var_1 == local_var_2);
auto& univ_var_16 = local_var_3;
return univ_var_16;
}
void riscv::update_riscv_JALR() {
auto local_var_1_shifted = riscv_inst >> 15;
auto local_var_1_mask = riscv_inst;
local_var_1_mask = (1 << (19 - 15 + 1)) - 1;
local_var_1_mask &= local_var_1_shifted;
uint5_t local_var_1 = boost::numeric_cast<uint5_t>(local_var_1_mask);
uint5_t local_var_2 = 31;
bool local_var_3 = (local_var_1 == local_var_2);
uint5_t local_var_5 = 30;
bool local_var_6 = (local_var_1 == local_var_5);
uint5_t local_var_8 = 29;
bool local_var_9 = (local_var_1 == local_var_8);
uint5_t local_var_11 = 28;
bool local_var_12 = (local_var_1 == local_var_11);
uint5_t local_var_14 = 27;
bool local_var_15 = (local_var_1 == local_var_14);
uint5_t local_var_17 = 26;
bool local_var_18 = (local_var_1 == local_var_17);
uint5_t local_var_20 = 25;
bool local_var_21 = (local_var_1 == local_var_20);
uint5_t local_var_23 = 24;
bool local_var_24 = (local_var_1 == local_var_23);
uint5_t local_var_26 = 23;
bool local_var_27 = (local_var_1 == local_var_26);
uint5_t local_var_29 = 22;
bool local_var_30 = (local_var_1 == local_var_29);
uint5_t local_var_32 = 21;
bool local_var_33 = (local_var_1 == local_var_32);
uint5_t local_var_35 = 20;
bool local_var_36 = (local_var_1 == local_var_35);
uint5_t local_var_38 = 19;
bool local_var_39 = (local_var_1 == local_var_38);
uint5_t local_var_41 = 18;
bool local_var_42 = (local_var_1 == local_var_41);
uint5_t local_var_44 = 17;
bool local_var_45 = (local_var_1 == local_var_44);
uint5_t local_var_47 = 16;
bool local_var_48 = (local_var_1 == local_var_47);
uint5_t local_var_50 = 15;
bool local_var_51 = (local_var_1 == local_var_50);
uint5_t local_var_53 = 14;
bool local_var_54 = (local_var_1 == local_var_53);
uint5_t local_var_56 = 13;
bool local_var_57 = (local_var_1 == local_var_56);
uint5_t local_var_59 = 12;
bool local_var_60 = (local_var_1 == local_var_59);
uint5_t local_var_62 = 11;
bool local_var_63 = (local_var_1 == local_var_62);
uint5_t local_var_65 = 10;
bool local_var_66 = (local_var_1 == local_var_65);
uint5_t local_var_68 = 9;
bool local_var_69 = (local_var_1 == local_var_68);
uint5_t local_var_71 = 8;
bool local_var_72 = (local_var_1 == local_var_71);
uint5_t local_var_74 = 7;
bool local_var_75 = (local_var_1 == local_var_74);
uint5_t local_var_77 = 6;
bool local_var_78 = (local_var_1 == local_var_77);
uint5_t local_var_80 = 5;
bool local_var_81 = (local_var_1 == local_var_80);
uint5_t local_var_83 = 4;
bool local_var_84 = (local_var_1 == local_var_83);
uint5_t local_var_86 = 3;
bool local_var_87 = (local_var_1 == local_var_86);
uint5_t local_var_89 = 2;
bool local_var_90 = (local_var_1 == local_var_89);
uint5_t local_var_92 = 1;
bool local_var_93 = (local_var_1 == local_var_92);
uint32_t local_var_95 = 0;
auto local_var_96 = (local_var_93) ? riscv_x1 : local_var_95;
auto local_var_97 = (local_var_90) ? riscv_x2 : local_var_96;
auto local_var_98 = (local_var_87) ? riscv_x3 : local_var_97;
auto local_var_99 = (local_var_84) ? riscv_x4 : local_var_98;
auto local_var_100 = (local_var_81) ? riscv_x5 : local_var_99;
auto local_var_101 = (local_var_78) ? riscv_x6 : local_var_100;
auto local_var_102 = (local_var_75) ? riscv_x7 : local_var_101;
auto local_var_103 = (local_var_72) ? riscv_x8 : local_var_102;
auto local_var_104 = (local_var_69) ? riscv_x9 : local_var_103;
auto local_var_105 = (local_var_66) ? riscv_x10 : local_var_104;
auto local_var_106 = (local_var_63) ? riscv_x11 : local_var_105;
auto local_var_107 = (local_var_60) ? riscv_x12 : local_var_106;
auto local_var_108 = (local_var_57) ? riscv_x13 : local_var_107;
auto local_var_109 = (local_var_54) ? riscv_x14 : local_var_108;
auto local_var_110 = (local_var_51) ? riscv_x15 : local_var_109;
auto local_var_111 = (local_var_48) ? riscv_x16 : local_var_110;
auto local_var_112 = (local_var_45) ? riscv_x17 : local_var_111;
auto local_var_113 = (local_var_42) ? riscv_x18 : local_var_112;
auto local_var_114 = (local_var_39) ? riscv_x19 : local_var_113;
auto local_var_115 = (local_var_36) ? riscv_x20 : local_var_114;
auto local_var_116 = (local_var_33) ? riscv_x21 : local_var_115;
auto local_var_117 = (local_var_30) ? riscv_x22 : local_var_116;
auto local_var_118 = (local_var_27) ? riscv_x23 : local_var_117;
auto local_var_119 = (local_var_24) ? riscv_x24 : local_var_118;
auto local_var_120 = (local_var_21) ? riscv_x25 : local_var_119;
auto local_var_121 = (local_var_18) ? riscv_x26 : local_var_120;
auto local_var_122 = (local_var_15) ? riscv_x27 : local_var_121;
auto local_var_123 = (local_var_12) ? riscv_x28 : local_var_122;
auto local_var_124 = (local_var_9) ? riscv_x29 : local_var_123;
auto local_var_125 = (local_var_6) ? riscv_x30 : local_var_124;
auto local_var_126 = (local_var_3) ? riscv_x31 : local_var_125;
auto local_var_127_shifted = riscv_inst >> 20;
auto local_var_127_mask = riscv_inst;
local_var_127_mask = (1 << (31 - 20 + 1)) - 1;
local_var_127_mask &= local_var_127_shifted;
uint12_t local_var_127 = boost::numeric_cast<uint12_t>(local_var_127_mask);
uint32_t local_var_128 = boost::numeric_cast<uint32_t>(((local_var_127 >> 11) == 1) ? (~local_var_127) : local_var_127);
local_var_128 = ((local_var_127 >> 11) == 1) ? (~local_var_128) : local_var_128;
uint32_t local_var_129 = (local_var_126 + local_var_128);
uint32_t local_var_130 = 4294967294;
uint32_t local_var_131 = (local_var_129 & local_var_130);
auto local_var_131_nxt_holder = local_var_131;
uint32_t local_var_132 = 0;
auto local_var_132_nxt_holder = local_var_132;
auto local_var_133_shifted = riscv_inst >> 7;
auto local_var_133_mask = riscv_inst;
local_var_133_mask = (1 << (11 - 7 + 1)) - 1;
local_var_133_mask &= local_var_133_shifted;
uint5_t local_var_133 = boost::numeric_cast<uint5_t>(local_var_133_mask);
uint5_t local_var_134 = 1;
bool local_var_135 = (local_var_133 == local_var_134);
uint32_t local_var_137 = 4;
uint32_t local_var_138 = (riscv_pc + local_var_137);
auto local_var_139 = (local_var_135) ? local_var_138 : riscv_x1;
auto local_var_139_nxt_holder = local_var_139;
uint5_t local_var_140 = 10;
bool local_var_141 = (local_var_133 == local_var_140);
auto local_var_142 = (local_var_141) ? local_var_138 : riscv_x10;
auto local_var_142_nxt_holder = local_var_142;
uint5_t local_var_143 = 11;
bool local_var_144 = (local_var_133 == local_var_143);
auto local_var_145 = (local_var_144) ? local_var_138 : riscv_x11;
auto local_var_145_nxt_holder = local_var_145;
uint5_t local_var_146 = 12;
bool local_var_147 = (local_var_133 == local_var_146);
auto local_var_148 = (local_var_147) ? local_var_138 : riscv_x12;
auto local_var_148_nxt_holder = local_var_148;
uint5_t local_var_149 = 13;
bool local_var_150 = (local_var_133 == local_var_149);
auto local_var_151 = (local_var_150) ? local_var_138 : riscv_x13;
auto local_var_151_nxt_holder = local_var_151;
uint5_t local_var_152 = 14;
bool local_var_153 = (local_var_133 == local_var_152);
auto local_var_154 = (local_var_153) ? local_var_138 : riscv_x14;
auto local_var_154_nxt_holder = local_var_154;
uint5_t local_var_155 = 15;
bool local_var_156 = (local_var_133 == local_var_155);
auto local_var_157 = (local_var_156) ? local_var_138 : riscv_x15;
auto local_var_157_nxt_holder = local_var_157;
uint5_t local_var_158 = 16;
bool local_var_159 = (local_var_133 == local_var_158);
auto local_var_160 = (local_var_159) ? local_var_138 : riscv_x16;
auto local_var_160_nxt_holder = local_var_160;
uint5_t local_var_161 = 17;
bool local_var_162 = (local_var_133 == local_var_161);
auto local_var_163 = (local_var_162) ? local_var_138 : riscv_x17;
auto local_var_163_nxt_holder = local_var_163;
uint5_t local_var_164 = 18;
bool local_var_165 = (local_var_133 == local_var_164);
auto local_var_166 = (local_var_165) ? local_var_138 : riscv_x18;
auto local_var_166_nxt_holder = local_var_166;
uint5_t local_var_167 = 19;
bool local_var_168 = (local_var_133 == local_var_167);
auto local_var_169 = (local_var_168) ? local_var_138 : riscv_x19;
auto local_var_169_nxt_holder = local_var_169;
uint5_t local_var_170 = 2;
bool local_var_171 = (local_var_133 == local_var_170);
auto local_var_172 = (local_var_171) ? local_var_138 : riscv_x2;
auto local_var_172_nxt_holder = local_var_172;
uint5_t local_var_173 = 20;
bool local_var_174 = (local_var_133 == local_var_173);
auto local_var_175 = (local_var_174) ? local_var_138 : riscv_x20;
auto local_var_175_nxt_holder = local_var_175;
uint5_t local_var_176 = 21;
bool local_var_177 = (local_var_133 == local_var_176);
auto local_var_178 = (local_var_177) ? local_var_138 : riscv_x21;
auto local_var_178_nxt_holder = local_var_178;
uint5_t local_var_179 = 22;
bool local_var_180 = (local_var_133 == local_var_179);
auto local_var_181 = (local_var_180) ? local_var_138 : riscv_x22;
auto local_var_181_nxt_holder = local_var_181;
uint5_t local_var_182 = 23;
bool local_var_183 = (local_var_133 == local_var_182);
auto local_var_184 = (local_var_183) ? local_var_138 : riscv_x23;
auto local_var_184_nxt_holder = local_var_184;
uint5_t local_var_185 = 24;
bool local_var_186 = (local_var_133 == local_var_185);
auto local_var_187 = (local_var_186) ? local_var_138 : riscv_x24;
auto local_var_187_nxt_holder = local_var_187;
uint5_t local_var_188 = 25;
bool local_var_189 = (local_var_133 == local_var_188);
auto local_var_190 = (local_var_189) ? local_var_138 : riscv_x25;
auto local_var_190_nxt_holder = local_var_190;
uint5_t local_var_191 = 26;
bool local_var_192 = (local_var_133 == local_var_191);
auto local_var_193 = (local_var_192) ? local_var_138 : riscv_x26;
auto local_var_193_nxt_holder = local_var_193;
uint5_t local_var_194 = 27;
bool local_var_195 = (local_var_133 == local_var_194);
auto local_var_196 = (local_var_195) ? local_var_138 : riscv_x27;
auto local_var_196_nxt_holder = local_var_196;
uint5_t local_var_197 = 28;
bool local_var_198 = (local_var_133 == local_var_197);
auto local_var_199 = (local_var_198) ? local_var_138 : riscv_x28;
auto local_var_199_nxt_holder = local_var_199;
uint5_t local_var_200 = 29;
bool local_var_201 = (local_var_133 == local_var_200);
auto local_var_202 = (local_var_201) ? local_var_138 : riscv_x29;
auto local_var_202_nxt_holder = local_var_202;
uint5_t local_var_203 = 3;
bool local_var_204 = (local_var_133 == local_var_203);
auto local_var_205 = (local_var_204) ? local_var_138 : riscv_x3;
auto local_var_205_nxt_holder = local_var_205;
uint5_t local_var_206 = 30;
bool local_var_207 = (local_var_133 == local_var_206);
auto local_var_208 = (local_var_207) ? local_var_138 : riscv_x30;
auto local_var_208_nxt_holder = local_var_208;
uint5_t local_var_209 = 31;
bool local_var_210 = (local_var_133 == local_var_209);
auto local_var_211 = (local_var_210) ? local_var_138 : riscv_x31;
auto local_var_211_nxt_holder = local_var_211;
uint5_t local_var_212 = 4;
bool local_var_213 = (local_var_133 == local_var_212);
auto local_var_214 = (local_var_213) ? local_var_138 : riscv_x4;
auto local_var_214_nxt_holder = local_var_214;
uint5_t local_var_215 = 5;
bool local_var_216 = (local_var_133 == local_var_215);
auto local_var_217 = (local_var_216) ? local_var_138 : riscv_x5;
auto local_var_217_nxt_holder = local_var_217;
uint5_t local_var_218 = 6;
bool local_var_219 = (local_var_133 == local_var_218);
auto local_var_220 = (local_var_219) ? local_var_138 : riscv_x6;
auto local_var_220_nxt_holder = local_var_220;
uint5_t local_var_221 = 7;
bool local_var_222 = (local_var_133 == local_var_221);
auto local_var_223 = (local_var_222) ? local_var_138 : riscv_x7;
auto local_var_223_nxt_holder = local_var_223;
uint5_t local_var_224 = 8;
bool local_var_225 = (local_var_133 == local_var_224);
auto local_var_226 = (local_var_225) ? local_var_138 : riscv_x8;
auto local_var_226_nxt_holder = local_var_226;
uint5_t local_var_227 = 9;
bool local_var_228 = (local_var_133 == local_var_227);
auto local_var_229 = (local_var_228) ? local_var_138 : riscv_x9;
auto local_var_229_nxt_holder = local_var_229;
riscv_pc = local_var_131_nxt_holder;
riscv_x0 = local_var_132_nxt_holder;
riscv_x1 = local_var_139_nxt_holder;
riscv_x10 = local_var_142_nxt_holder;
riscv_x11 = local_var_145_nxt_holder;
riscv_x12 = local_var_148_nxt_holder;
riscv_x13 = local_var_151_nxt_holder;
riscv_x14 = local_var_154_nxt_holder;
riscv_x15 = local_var_157_nxt_holder;
riscv_x16 = local_var_160_nxt_holder;
riscv_x17 = local_var_163_nxt_holder;
riscv_x18 = local_var_166_nxt_holder;
riscv_x19 = local_var_169_nxt_holder;
riscv_x2 = local_var_172_nxt_holder;
riscv_x20 = local_var_175_nxt_holder;
riscv_x21 = local_var_178_nxt_holder;
riscv_x22 = local_var_181_nxt_holder;
riscv_x23 = local_var_184_nxt_holder;
riscv_x24 = local_var_187_nxt_holder;
riscv_x25 = local_var_190_nxt_holder;
riscv_x26 = local_var_193_nxt_holder;
riscv_x27 = local_var_196_nxt_holder;
riscv_x28 = local_var_199_nxt_holder;
riscv_x29 = local_var_202_nxt_holder;
riscv_x3 = local_var_205_nxt_holder;
riscv_x30 = local_var_208_nxt_holder;
riscv_x31 = local_var_211_nxt_holder;
riscv_x4 = local_var_214_nxt_holder;
riscv_x5 = local_var_217_nxt_holder;
riscv_x6 = local_var_220_nxt_holder;
riscv_x7 = local_var_223_nxt_holder;
riscv_x8 = local_var_226_nxt_holder;
riscv_x9 = local_var_229_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "JALR state updates:" << std::endl;
instr_update_log << "    riscv_pc => " << std::hex << "0x" << riscv_pc << std::endl; 
instr_update_log << "    riscv_x0 => " << std::hex << "0x" << riscv_x0 << std::endl; 
instr_update_log << "    riscv_x1 => " << std::hex << "0x" << riscv_x1 << std::endl; 
instr_update_log << "    riscv_x10 => " << std::hex << "0x" << riscv_x10 << std::endl; 
instr_update_log << "    riscv_x11 => " << std::hex << "0x" << riscv_x11 << std::endl; 
instr_update_log << "    riscv_x12 => " << std::hex << "0x" << riscv_x12 << std::endl; 
instr_update_log << "    riscv_x13 => " << std::hex << "0x" << riscv_x13 << std::endl; 
instr_update_log << "    riscv_x14 => " << std::hex << "0x" << riscv_x14 << std::endl; 
instr_update_log << "    riscv_x15 => " << std::hex << "0x" << riscv_x15 << std::endl; 
instr_update_log << "    riscv_x16 => " << std::hex << "0x" << riscv_x16 << std::endl; 
instr_update_log << "    riscv_x17 => " << std::hex << "0x" << riscv_x17 << std::endl; 
instr_update_log << "    riscv_x18 => " << std::hex << "0x" << riscv_x18 << std::endl; 
instr_update_log << "    riscv_x19 => " << std::hex << "0x" << riscv_x19 << std::endl; 
instr_update_log << "    riscv_x2 => " << std::hex << "0x" << riscv_x2 << std::endl; 
instr_update_log << "    riscv_x20 => " << std::hex << "0x" << riscv_x20 << std::endl; 
instr_update_log << "    riscv_x21 => " << std::hex << "0x" << riscv_x21 << std::endl; 
instr_update_log << "    riscv_x22 => " << std::hex << "0x" << riscv_x22 << std::endl; 
instr_update_log << "    riscv_x23 => " << std::hex << "0x" << riscv_x23 << std::endl; 
instr_update_log << "    riscv_x24 => " << std::hex << "0x" << riscv_x24 << std::endl; 
instr_update_log << "    riscv_x25 => " << std::hex << "0x" << riscv_x25 << std::endl; 
instr_update_log << "    riscv_x26 => " << std::hex << "0x" << riscv_x26 << std::endl; 
instr_update_log << "    riscv_x27 => " << std::hex << "0x" << riscv_x27 << std::endl; 
instr_update_log << "    riscv_x28 => " << std::hex << "0x" << riscv_x28 << std::endl; 
instr_update_log << "    riscv_x29 => " << std::hex << "0x" << riscv_x29 << std::endl; 
instr_update_log << "    riscv_x3 => " << std::hex << "0x" << riscv_x3 << std::endl; 
instr_update_log << "    riscv_x30 => " << std::hex << "0x" << riscv_x30 << std::endl; 
instr_update_log << "    riscv_x31 => " << std::hex << "0x" << riscv_x31 << std::endl; 
instr_update_log << "    riscv_x4 => " << std::hex << "0x" << riscv_x4 << std::endl; 
instr_update_log << "    riscv_x5 => " << std::hex << "0x" << riscv_x5 << std::endl; 
instr_update_log << "    riscv_x6 => " << std::hex << "0x" << riscv_x6 << std::endl; 
instr_update_log << "    riscv_x7 => " << std::hex << "0x" << riscv_x7 << std::endl; 
instr_update_log << "    riscv_x8 => " << std::hex << "0x" << riscv_x8 << std::endl; 
instr_update_log << "    riscv_x9 => " << std::hex << "0x" << riscv_x9 << std::endl; 
instr_update_log << std::endl;
#endif
}
