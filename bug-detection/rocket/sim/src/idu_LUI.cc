#include <riscv.h>
bool riscv::decode_riscv_LUI() {
auto local_var_1_shifted = riscv_inst >> 0;
auto local_var_1_mask = riscv_inst;
local_var_1_mask = (1 << (6 - 0 + 1)) - 1;
local_var_1_mask &= local_var_1_shifted;
uint7_t local_var_1 = boost::numeric_cast<uint7_t>(local_var_1_mask);
uint7_t local_var_2 = 55;
bool local_var_3 = (local_var_1 == local_var_2);
auto& univ_var_52 = local_var_3;
return univ_var_52;
}
void riscv::update_riscv_LUI() {
uint32_t local_var_1 = 4;
uint32_t local_var_2 = (riscv_pc + local_var_1);
auto local_var_2_nxt_holder = local_var_2;
uint32_t local_var_3 = 0;
auto local_var_3_nxt_holder = local_var_3;
auto local_var_5_shifted = riscv_inst >> 7;
auto local_var_5_mask = riscv_inst;
local_var_5_mask = (1 << (11 - 7 + 1)) - 1;
local_var_5_mask &= local_var_5_shifted;
uint5_t local_var_5 = boost::numeric_cast<uint5_t>(local_var_5_mask);
uint5_t local_var_6 = 1;
bool local_var_7 = (local_var_5 == local_var_6);
auto local_var_8_shifted = riscv_inst >> 12;
auto local_var_8_mask = riscv_inst;
local_var_8_mask = (1 << (31 - 12 + 1)) - 1;
local_var_8_mask &= local_var_8_shifted;
uint20_t local_var_8 = boost::numeric_cast<uint20_t>(local_var_8_mask);
uint12_t local_var_9 = 0;
univ_var_53 = (boost::numeric_cast<uint32_t>(local_var_8) << 12) + boost::numeric_cast<uint32_t>(local_var_9);
auto local_var_12 = (local_var_7) ? univ_var_53 : riscv_x1;
auto local_var_12_nxt_holder = local_var_12;
uint5_t local_var_13 = 10;
bool local_var_14 = (local_var_5 == local_var_13);
auto local_var_16 = (local_var_14) ? univ_var_53 : riscv_x10;
auto local_var_16_nxt_holder = local_var_16;
uint5_t local_var_17 = 11;
bool local_var_18 = (local_var_5 == local_var_17);
auto local_var_20 = (local_var_18) ? univ_var_53 : riscv_x11;
auto local_var_20_nxt_holder = local_var_20;
uint5_t local_var_21 = 12;
bool local_var_22 = (local_var_5 == local_var_21);
auto local_var_24 = (local_var_22) ? univ_var_53 : riscv_x12;
auto local_var_24_nxt_holder = local_var_24;
uint5_t local_var_25 = 13;
bool local_var_26 = (local_var_5 == local_var_25);
auto local_var_28 = (local_var_26) ? univ_var_53 : riscv_x13;
auto local_var_28_nxt_holder = local_var_28;
uint5_t local_var_29 = 14;
bool local_var_30 = (local_var_5 == local_var_29);
auto local_var_32 = (local_var_30) ? univ_var_53 : riscv_x14;
auto local_var_32_nxt_holder = local_var_32;
uint5_t local_var_33 = 15;
bool local_var_34 = (local_var_5 == local_var_33);
auto local_var_36 = (local_var_34) ? univ_var_53 : riscv_x15;
auto local_var_36_nxt_holder = local_var_36;
uint5_t local_var_37 = 16;
bool local_var_38 = (local_var_5 == local_var_37);
auto local_var_40 = (local_var_38) ? univ_var_53 : riscv_x16;
auto local_var_40_nxt_holder = local_var_40;
uint5_t local_var_41 = 17;
bool local_var_42 = (local_var_5 == local_var_41);
auto local_var_44 = (local_var_42) ? univ_var_53 : riscv_x17;
auto local_var_44_nxt_holder = local_var_44;
uint5_t local_var_45 = 18;
bool local_var_46 = (local_var_5 == local_var_45);
auto local_var_48 = (local_var_46) ? univ_var_53 : riscv_x18;
auto local_var_48_nxt_holder = local_var_48;
uint5_t local_var_49 = 19;
bool local_var_50 = (local_var_5 == local_var_49);
auto local_var_52 = (local_var_50) ? univ_var_53 : riscv_x19;
auto local_var_52_nxt_holder = local_var_52;
uint5_t local_var_53 = 2;
bool local_var_54 = (local_var_5 == local_var_53);
auto local_var_56 = (local_var_54) ? univ_var_53 : riscv_x2;
auto local_var_56_nxt_holder = local_var_56;
uint5_t local_var_57 = 20;
bool local_var_58 = (local_var_5 == local_var_57);
auto local_var_60 = (local_var_58) ? univ_var_53 : riscv_x20;
auto local_var_60_nxt_holder = local_var_60;
uint5_t local_var_61 = 21;
bool local_var_62 = (local_var_5 == local_var_61);
auto local_var_64 = (local_var_62) ? univ_var_53 : riscv_x21;
auto local_var_64_nxt_holder = local_var_64;
uint5_t local_var_65 = 22;
bool local_var_66 = (local_var_5 == local_var_65);
auto local_var_68 = (local_var_66) ? univ_var_53 : riscv_x22;
auto local_var_68_nxt_holder = local_var_68;
uint5_t local_var_69 = 23;
bool local_var_70 = (local_var_5 == local_var_69);
auto local_var_72 = (local_var_70) ? univ_var_53 : riscv_x23;
auto local_var_72_nxt_holder = local_var_72;
uint5_t local_var_73 = 24;
bool local_var_74 = (local_var_5 == local_var_73);
auto local_var_76 = (local_var_74) ? univ_var_53 : riscv_x24;
auto local_var_76_nxt_holder = local_var_76;
uint5_t local_var_77 = 25;
bool local_var_78 = (local_var_5 == local_var_77);
auto local_var_80 = (local_var_78) ? univ_var_53 : riscv_x25;
auto local_var_80_nxt_holder = local_var_80;
uint5_t local_var_81 = 26;
bool local_var_82 = (local_var_5 == local_var_81);
auto local_var_84 = (local_var_82) ? univ_var_53 : riscv_x26;
auto local_var_84_nxt_holder = local_var_84;
uint5_t local_var_85 = 27;
bool local_var_86 = (local_var_5 == local_var_85);
auto local_var_88 = (local_var_86) ? univ_var_53 : riscv_x27;
auto local_var_88_nxt_holder = local_var_88;
uint5_t local_var_89 = 28;
bool local_var_90 = (local_var_5 == local_var_89);
auto local_var_92 = (local_var_90) ? univ_var_53 : riscv_x28;
auto local_var_92_nxt_holder = local_var_92;
uint5_t local_var_93 = 29;
bool local_var_94 = (local_var_5 == local_var_93);
auto local_var_96 = (local_var_94) ? univ_var_53 : riscv_x29;
auto local_var_96_nxt_holder = local_var_96;
uint5_t local_var_97 = 3;
bool local_var_98 = (local_var_5 == local_var_97);
auto local_var_100 = (local_var_98) ? univ_var_53 : riscv_x3;
auto local_var_100_nxt_holder = local_var_100;
uint5_t local_var_101 = 30;
bool local_var_102 = (local_var_5 == local_var_101);
auto local_var_104 = (local_var_102) ? univ_var_53 : riscv_x30;
auto local_var_104_nxt_holder = local_var_104;
uint5_t local_var_105 = 31;
bool local_var_106 = (local_var_5 == local_var_105);
auto local_var_108 = (local_var_106) ? univ_var_53 : riscv_x31;
auto local_var_108_nxt_holder = local_var_108;
uint5_t local_var_109 = 4;
bool local_var_110 = (local_var_5 == local_var_109);
auto local_var_112 = (local_var_110) ? univ_var_53 : riscv_x4;
auto local_var_112_nxt_holder = local_var_112;
uint5_t local_var_113 = 5;
bool local_var_114 = (local_var_5 == local_var_113);
auto local_var_116 = (local_var_114) ? univ_var_53 : riscv_x5;
auto local_var_116_nxt_holder = local_var_116;
uint5_t local_var_117 = 6;
bool local_var_118 = (local_var_5 == local_var_117);
auto local_var_120 = (local_var_118) ? univ_var_53 : riscv_x6;
auto local_var_120_nxt_holder = local_var_120;
uint5_t local_var_121 = 7;
bool local_var_122 = (local_var_5 == local_var_121);
auto local_var_124 = (local_var_122) ? univ_var_53 : riscv_x7;
auto local_var_124_nxt_holder = local_var_124;
uint5_t local_var_125 = 8;
bool local_var_126 = (local_var_5 == local_var_125);
auto local_var_128 = (local_var_126) ? univ_var_53 : riscv_x8;
auto local_var_128_nxt_holder = local_var_128;
uint5_t local_var_129 = 9;
bool local_var_130 = (local_var_5 == local_var_129);
auto local_var_132 = (local_var_130) ? univ_var_53 : riscv_x9;
auto local_var_132_nxt_holder = local_var_132;
riscv_pc = local_var_2_nxt_holder;
riscv_x0 = local_var_3_nxt_holder;
riscv_x1 = local_var_12_nxt_holder;
riscv_x10 = local_var_16_nxt_holder;
riscv_x11 = local_var_20_nxt_holder;
riscv_x12 = local_var_24_nxt_holder;
riscv_x13 = local_var_28_nxt_holder;
riscv_x14 = local_var_32_nxt_holder;
riscv_x15 = local_var_36_nxt_holder;
riscv_x16 = local_var_40_nxt_holder;
riscv_x17 = local_var_44_nxt_holder;
riscv_x18 = local_var_48_nxt_holder;
riscv_x19 = local_var_52_nxt_holder;
riscv_x2 = local_var_56_nxt_holder;
riscv_x20 = local_var_60_nxt_holder;
riscv_x21 = local_var_64_nxt_holder;
riscv_x22 = local_var_68_nxt_holder;
riscv_x23 = local_var_72_nxt_holder;
riscv_x24 = local_var_76_nxt_holder;
riscv_x25 = local_var_80_nxt_holder;
riscv_x26 = local_var_84_nxt_holder;
riscv_x27 = local_var_88_nxt_holder;
riscv_x28 = local_var_92_nxt_holder;
riscv_x29 = local_var_96_nxt_holder;
riscv_x3 = local_var_100_nxt_holder;
riscv_x30 = local_var_104_nxt_holder;
riscv_x31 = local_var_108_nxt_holder;
riscv_x4 = local_var_112_nxt_holder;
riscv_x5 = local_var_116_nxt_holder;
riscv_x6 = local_var_120_nxt_holder;
riscv_x7 = local_var_124_nxt_holder;
riscv_x8 = local_var_128_nxt_holder;
riscv_x9 = local_var_132_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "LUI state updates:" << std::endl;
instr_update_log << "    riscv_pc => " << std::hex << "0x" << riscv_pc << std::endl; 
instr_update_log << "    riscv_x0 => " << std::hex << "0x" << riscv_x0 << std::endl; 
instr_update_log << "    riscv_x1 => " << std::hex << "0x" << riscv_x1 << std::endl; 
instr_update_log << "    riscv_x10 => " << std::hex << "0x" << riscv_x10 << std::endl; 
instr_update_log << "    riscv_x11 => " << std::hex << "0x" << riscv_x11 << std::endl; 
instr_update_log << "    riscv_x12 => " << std::hex << "0x" << riscv_x12 << std::endl; 
instr_update_log << "    riscv_x13 => " << std::hex << "0x" << riscv_x13 << std::endl; 
instr_update_log << "    riscv_x14 => " << std::hex << "0x" << riscv_x14 << std::endl; 
instr_update_log << "    riscv_x15 => " << std::hex << "0x" << riscv_x15 << std::endl; 
instr_update_log << "    riscv_x16 => " << std::hex << "0x" << riscv_x16 << std::endl; 
instr_update_log << "    riscv_x17 => " << std::hex << "0x" << riscv_x17 << std::endl; 
instr_update_log << "    riscv_x18 => " << std::hex << "0x" << riscv_x18 << std::endl; 
instr_update_log << "    riscv_x19 => " << std::hex << "0x" << riscv_x19 << std::endl; 
instr_update_log << "    riscv_x2 => " << std::hex << "0x" << riscv_x2 << std::endl; 
instr_update_log << "    riscv_x20 => " << std::hex << "0x" << riscv_x20 << std::endl; 
instr_update_log << "    riscv_x21 => " << std::hex << "0x" << riscv_x21 << std::endl; 
instr_update_log << "    riscv_x22 => " << std::hex << "0x" << riscv_x22 << std::endl; 
instr_update_log << "    riscv_x23 => " << std::hex << "0x" << riscv_x23 << std::endl; 
instr_update_log << "    riscv_x24 => " << std::hex << "0x" << riscv_x24 << std::endl; 
instr_update_log << "    riscv_x25 => " << std::hex << "0x" << riscv_x25 << std::endl; 
instr_update_log << "    riscv_x26 => " << std::hex << "0x" << riscv_x26 << std::endl; 
instr_update_log << "    riscv_x27 => " << std::hex << "0x" << riscv_x27 << std::endl; 
instr_update_log << "    riscv_x28 => " << std::hex << "0x" << riscv_x28 << std::endl; 
instr_update_log << "    riscv_x29 => " << std::hex << "0x" << riscv_x29 << std::endl; 
instr_update_log << "    riscv_x3 => " << std::hex << "0x" << riscv_x3 << std::endl; 
instr_update_log << "    riscv_x30 => " << std::hex << "0x" << riscv_x30 << std::endl; 
instr_update_log << "    riscv_x31 => " << std::hex << "0x" << riscv_x31 << std::endl; 
instr_update_log << "    riscv_x4 => " << std::hex << "0x" << riscv_x4 << std::endl; 
instr_update_log << "    riscv_x5 => " << std::hex << "0x" << riscv_x5 << std::endl; 
instr_update_log << "    riscv_x6 => " << std::hex << "0x" << riscv_x6 << std::endl; 
instr_update_log << "    riscv_x7 => " << std::hex << "0x" << riscv_x7 << std::endl; 
instr_update_log << "    riscv_x8 => " << std::hex << "0x" << riscv_x8 << std::endl; 
instr_update_log << "    riscv_x9 => " << std::hex << "0x" << riscv_x9 << std::endl; 
instr_update_log << std::endl;
#endif
}
