#include <AES.h>
bool AES::decode_AES_WRITE_COUNTER() {
uint2_t local_var_1 = 2;
bool local_var_2 = (AES_cmd == local_var_1);
uint16_t local_var_4 = 65312;
bool local_var_5 = (AES_cmdaddr == local_var_4);
bool local_var_6 = (AES_cmdaddr > local_var_4);
bool local_var_7 = (local_var_5 | local_var_6);
bool local_var_8 = (local_var_2 & local_var_7);
uint16_t local_var_9 = 65328;
bool local_var_10 = (AES_cmdaddr < local_var_9);
bool local_var_11 = (local_var_8 & local_var_10);
auto& univ_var_47 = local_var_11;
return univ_var_47;
}
void AES::update_AES_WRITE_COUNTER() {
auto AES_aes_address_nxt_holder = AES_aes_address;
uint2_t local_var_2 = 0;
bool local_var_3 = (AES_aes_status == local_var_2);
uint16_t local_var_5 = 65312;
uint16_t local_var_6 = (AES_cmdaddr - local_var_5);
uint16_t local_var_7 = 15;
bool local_var_8 = (local_var_6 == local_var_7);
auto local_var_11_shifted = AES_aes_counter >> 120;
auto local_var_11_mask = AES_aes_counter;
local_var_11_mask = (1 << (127 - 120 + 1)) - 1;
local_var_11_mask &= local_var_11_shifted;
uint8_t local_var_11 = boost::numeric_cast<uint8_t>(local_var_11_mask);
auto local_var_12 = (local_var_8) ? AES_cmddata : local_var_11;
uint16_t local_var_13 = 65312;
uint16_t local_var_14 = (AES_cmdaddr - local_var_13);
uint16_t local_var_15 = 14;
bool local_var_16 = (local_var_14 == local_var_15);
auto local_var_17_shifted = AES_aes_counter >> 112;
auto local_var_17_mask = AES_aes_counter;
local_var_17_mask = (1 << (119 - 112 + 1)) - 1;
local_var_17_mask &= local_var_17_shifted;
uint8_t local_var_17 = boost::numeric_cast<uint8_t>(local_var_17_mask);
auto local_var_18 = (local_var_16) ? AES_cmddata : local_var_17;
uint16_t local_var_19 = 65312;
uint16_t local_var_20 = (AES_cmdaddr - local_var_19);
uint16_t local_var_21 = 13;
bool local_var_22 = (local_var_20 == local_var_21);
auto local_var_23_shifted = AES_aes_counter >> 104;
auto local_var_23_mask = AES_aes_counter;
local_var_23_mask = (1 << (111 - 104 + 1)) - 1;
local_var_23_mask &= local_var_23_shifted;
uint8_t local_var_23 = boost::numeric_cast<uint8_t>(local_var_23_mask);
auto local_var_24 = (local_var_22) ? AES_cmddata : local_var_23;
uint16_t local_var_25 = 65312;
uint16_t local_var_26 = (AES_cmdaddr - local_var_25);
uint16_t local_var_27 = 12;
bool local_var_28 = (local_var_26 == local_var_27);
auto local_var_29_shifted = AES_aes_counter >> 96;
auto local_var_29_mask = AES_aes_counter;
local_var_29_mask = (1 << (103 - 96 + 1)) - 1;
local_var_29_mask &= local_var_29_shifted;
uint8_t local_var_29 = boost::numeric_cast<uint8_t>(local_var_29_mask);
auto local_var_30 = (local_var_28) ? AES_cmddata : local_var_29;
uint16_t local_var_31 = 65312;
uint16_t local_var_32 = (AES_cmdaddr - local_var_31);
uint16_t local_var_33 = 11;
bool local_var_34 = (local_var_32 == local_var_33);
auto local_var_35_shifted = AES_aes_counter >> 88;
auto local_var_35_mask = AES_aes_counter;
local_var_35_mask = (1 << (95 - 88 + 1)) - 1;
local_var_35_mask &= local_var_35_shifted;
uint8_t local_var_35 = boost::numeric_cast<uint8_t>(local_var_35_mask);
auto local_var_36 = (local_var_34) ? AES_cmddata : local_var_35;
uint16_t local_var_37 = 65312;
uint16_t local_var_38 = (AES_cmdaddr - local_var_37);
uint16_t local_var_39 = 10;
bool local_var_40 = (local_var_38 == local_var_39);
auto local_var_41_shifted = AES_aes_counter >> 80;
auto local_var_41_mask = AES_aes_counter;
local_var_41_mask = (1 << (87 - 80 + 1)) - 1;
local_var_41_mask &= local_var_41_shifted;
uint8_t local_var_41 = boost::numeric_cast<uint8_t>(local_var_41_mask);
auto local_var_42 = (local_var_40) ? AES_cmddata : local_var_41;
uint16_t local_var_43 = 65312;
uint16_t local_var_44 = (AES_cmdaddr - local_var_43);
uint16_t local_var_45 = 9;
bool local_var_46 = (local_var_44 == local_var_45);
auto local_var_47_shifted = AES_aes_counter >> 72;
auto local_var_47_mask = AES_aes_counter;
local_var_47_mask = (1 << (79 - 72 + 1)) - 1;
local_var_47_mask &= local_var_47_shifted;
uint8_t local_var_47 = boost::numeric_cast<uint8_t>(local_var_47_mask);
auto local_var_48 = (local_var_46) ? AES_cmddata : local_var_47;
uint16_t local_var_49 = 65312;
uint16_t local_var_50 = (AES_cmdaddr - local_var_49);
uint16_t local_var_51 = 8;
bool local_var_52 = (local_var_50 == local_var_51);
auto local_var_53_shifted = AES_aes_counter >> 64;
auto local_var_53_mask = AES_aes_counter;
local_var_53_mask = (1 << (71 - 64 + 1)) - 1;
local_var_53_mask &= local_var_53_shifted;
uint8_t local_var_53 = boost::numeric_cast<uint8_t>(local_var_53_mask);
auto local_var_54 = (local_var_52) ? AES_cmddata : local_var_53;
uint16_t local_var_55 = 65312;
uint16_t local_var_56 = (AES_cmdaddr - local_var_55);
uint16_t local_var_57 = 7;
bool local_var_58 = (local_var_56 == local_var_57);
auto local_var_59_shifted = AES_aes_counter >> 56;
auto local_var_59_mask = AES_aes_counter;
local_var_59_mask = (1 << (63 - 56 + 1)) - 1;
local_var_59_mask &= local_var_59_shifted;
uint8_t local_var_59 = boost::numeric_cast<uint8_t>(local_var_59_mask);
auto local_var_60 = (local_var_58) ? AES_cmddata : local_var_59;
uint16_t local_var_61 = 65312;
uint16_t local_var_62 = (AES_cmdaddr - local_var_61);
uint16_t local_var_63 = 6;
bool local_var_64 = (local_var_62 == local_var_63);
auto local_var_65_shifted = AES_aes_counter >> 48;
auto local_var_65_mask = AES_aes_counter;
local_var_65_mask = (1 << (55 - 48 + 1)) - 1;
local_var_65_mask &= local_var_65_shifted;
uint8_t local_var_65 = boost::numeric_cast<uint8_t>(local_var_65_mask);
auto local_var_66 = (local_var_64) ? AES_cmddata : local_var_65;
uint16_t local_var_67 = 65312;
uint16_t local_var_68 = (AES_cmdaddr - local_var_67);
uint16_t local_var_69 = 5;
bool local_var_70 = (local_var_68 == local_var_69);
auto local_var_71_shifted = AES_aes_counter >> 40;
auto local_var_71_mask = AES_aes_counter;
local_var_71_mask = (1 << (47 - 40 + 1)) - 1;
local_var_71_mask &= local_var_71_shifted;
uint8_t local_var_71 = boost::numeric_cast<uint8_t>(local_var_71_mask);
auto local_var_72 = (local_var_70) ? AES_cmddata : local_var_71;
uint16_t local_var_73 = 65312;
uint16_t local_var_74 = (AES_cmdaddr - local_var_73);
uint16_t local_var_75 = 4;
bool local_var_76 = (local_var_74 == local_var_75);
auto local_var_77_shifted = AES_aes_counter >> 32;
auto local_var_77_mask = AES_aes_counter;
local_var_77_mask = (1 << (39 - 32 + 1)) - 1;
local_var_77_mask &= local_var_77_shifted;
uint8_t local_var_77 = boost::numeric_cast<uint8_t>(local_var_77_mask);
auto local_var_78 = (local_var_76) ? AES_cmddata : local_var_77;
uint16_t local_var_79 = 65312;
uint16_t local_var_80 = (AES_cmdaddr - local_var_79);
uint16_t local_var_81 = 3;
bool local_var_82 = (local_var_80 == local_var_81);
auto local_var_83_shifted = AES_aes_counter >> 24;
auto local_var_83_mask = AES_aes_counter;
local_var_83_mask = (1 << (31 - 24 + 1)) - 1;
local_var_83_mask &= local_var_83_shifted;
uint8_t local_var_83 = boost::numeric_cast<uint8_t>(local_var_83_mask);
auto local_var_84 = (local_var_82) ? AES_cmddata : local_var_83;
uint16_t local_var_85 = 65312;
uint16_t local_var_86 = (AES_cmdaddr - local_var_85);
uint16_t local_var_87 = 2;
bool local_var_88 = (local_var_86 == local_var_87);
auto local_var_89_shifted = AES_aes_counter >> 16;
auto local_var_89_mask = AES_aes_counter;
local_var_89_mask = (1 << (23 - 16 + 1)) - 1;
local_var_89_mask &= local_var_89_shifted;
uint8_t local_var_89 = boost::numeric_cast<uint8_t>(local_var_89_mask);
auto local_var_90 = (local_var_88) ? AES_cmddata : local_var_89;
uint16_t local_var_91 = 65312;
uint16_t local_var_92 = (AES_cmdaddr - local_var_91);
uint16_t local_var_93 = 1;
bool local_var_94 = (local_var_92 == local_var_93);
auto local_var_95_shifted = AES_aes_counter >> 8;
auto local_var_95_mask = AES_aes_counter;
local_var_95_mask = (1 << (15 - 8 + 1)) - 1;
local_var_95_mask &= local_var_95_shifted;
uint8_t local_var_95 = boost::numeric_cast<uint8_t>(local_var_95_mask);
auto local_var_96 = (local_var_94) ? AES_cmddata : local_var_95;
uint16_t local_var_97 = 65312;
uint16_t local_var_98 = (AES_cmdaddr - local_var_97);
uint16_t local_var_99 = 0;
bool local_var_100 = (local_var_98 == local_var_99);
auto local_var_101_shifted = AES_aes_counter >> 0;
auto local_var_101_mask = AES_aes_counter;
local_var_101_mask = (1 << (7 - 0 + 1)) - 1;
local_var_101_mask &= local_var_101_shifted;
uint8_t local_var_101 = boost::numeric_cast<uint8_t>(local_var_101_mask);
auto local_var_102 = (local_var_100) ? AES_cmddata : local_var_101;
univ_var_48 = (boost::numeric_cast<uint16_t>(local_var_96) << 8) + boost::numeric_cast<uint16_t>(local_var_102);
univ_var_49 = (boost::numeric_cast<uint24_t>(local_var_90) << 16) + boost::numeric_cast<uint24_t>(univ_var_48);
univ_var_50 = (boost::numeric_cast<uint32_t>(local_var_84) << 24) + boost::numeric_cast<uint32_t>(univ_var_49);
univ_var_51 = (boost::numeric_cast<uint40_t>(local_var_78) << 32) + boost::numeric_cast<uint40_t>(univ_var_50);
univ_var_52 = (boost::numeric_cast<uint48_t>(local_var_72) << 40) + boost::numeric_cast<uint48_t>(univ_var_51);
univ_var_53 = (boost::numeric_cast<uint56_t>(local_var_66) << 48) + boost::numeric_cast<uint56_t>(univ_var_52);
univ_var_54 = (boost::numeric_cast<uint64_t>(local_var_60) << 56) + boost::numeric_cast<uint64_t>(univ_var_53);
univ_var_55 = (boost::numeric_cast<uint72_t>(local_var_54) << 64) + boost::numeric_cast<uint72_t>(univ_var_54);
univ_var_56 = (boost::numeric_cast<uint80_t>(local_var_48) << 72) + boost::numeric_cast<uint80_t>(univ_var_55);
univ_var_57 = (boost::numeric_cast<uint88_t>(local_var_42) << 80) + boost::numeric_cast<uint88_t>(univ_var_56);
univ_var_58 = (boost::numeric_cast<uint96_t>(local_var_36) << 88) + boost::numeric_cast<uint96_t>(univ_var_57);
univ_var_59 = (boost::numeric_cast<uint104_t>(local_var_30) << 96) + boost::numeric_cast<uint104_t>(univ_var_58);
univ_var_60 = (boost::numeric_cast<uint112_t>(local_var_24) << 104) + boost::numeric_cast<uint112_t>(univ_var_59);
univ_var_61 = (boost::numeric_cast<uint120_t>(local_var_18) << 112) + boost::numeric_cast<uint120_t>(univ_var_60);
univ_var_62 = (boost::numeric_cast<uint128_t>(local_var_12) << 120) + boost::numeric_cast<uint128_t>(univ_var_61);
auto local_var_118 = unknown2();
auto local_var_119 = (local_var_3) ? univ_var_62 : local_var_118;
auto local_var_119_nxt_holder = local_var_119;
auto AES_aes_key_nxt_holder = AES_aes_key;
AES_aes_address = AES_aes_address_nxt_holder;
AES_aes_counter = local_var_119_nxt_holder;
AES_aes_key = AES_aes_key_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "WRITE_COUNTER state updates:" << std::endl;
instr_update_log << "    AES_aes_address => " << std::hex << "0x" << AES_aes_address << std::endl; 
instr_update_log << "    AES_aes_counter => " << std::hex << "0x" << AES_aes_counter << std::endl; 
instr_update_log << "    AES_aes_key => " << std::hex << "0x" << AES_aes_key << std::endl; 
instr_update_log << std::endl;
#endif
}
