#include <AES.h>
bool AES::decode_AES_GET_STATUS() {
uint2_t local_var_1 = 1;
bool local_var_2 = (AES_cmd == local_var_1);
uint16_t local_var_4 = 65312;
bool local_var_5 = (AES_cmdaddr == local_var_4);
bool local_var_6 = (AES_cmdaddr > local_var_4);
bool local_var_7 = (local_var_5 | local_var_6);
bool local_var_8 = (local_var_2 & local_var_7);
uint16_t local_var_9 = 65328;
bool local_var_10 = (AES_cmdaddr < local_var_9);
bool local_var_11 = (local_var_8 & local_var_10);
auto& univ_var_28 = local_var_11;
return univ_var_28;
}
void AES::update_AES_GET_STATUS() {
auto AES_aes_address_nxt_holder = AES_aes_address;
auto AES_aes_key_nxt_holder = AES_aes_key;
auto AES_aes_length_nxt_holder = AES_aes_length;
uint16_t local_var_4 = 65312;
uint16_t local_var_5 = (AES_cmdaddr - local_var_4);
uint16_t local_var_6 = 15;
bool local_var_7 = (local_var_5 == local_var_6);
auto local_var_9_shifted = AES_aes_counter >> 120;
auto local_var_9_mask = AES_aes_counter;
local_var_9_mask = (1 << (127 - 120 + 1)) - 1;
local_var_9_mask &= local_var_9_shifted;
uint8_t local_var_9 = boost::numeric_cast<uint8_t>(local_var_9_mask);
uint16_t local_var_10 = 65312;
uint16_t local_var_11 = (AES_cmdaddr - local_var_10);
uint16_t local_var_12 = 14;
bool local_var_13 = (local_var_11 == local_var_12);
auto local_var_14_shifted = AES_aes_counter >> 112;
auto local_var_14_mask = AES_aes_counter;
local_var_14_mask = (1 << (119 - 112 + 1)) - 1;
local_var_14_mask &= local_var_14_shifted;
uint8_t local_var_14 = boost::numeric_cast<uint8_t>(local_var_14_mask);
uint16_t local_var_15 = 65312;
uint16_t local_var_16 = (AES_cmdaddr - local_var_15);
uint16_t local_var_17 = 13;
bool local_var_18 = (local_var_16 == local_var_17);
auto local_var_19_shifted = AES_aes_counter >> 104;
auto local_var_19_mask = AES_aes_counter;
local_var_19_mask = (1 << (111 - 104 + 1)) - 1;
local_var_19_mask &= local_var_19_shifted;
uint8_t local_var_19 = boost::numeric_cast<uint8_t>(local_var_19_mask);
uint16_t local_var_20 = 65312;
uint16_t local_var_21 = (AES_cmdaddr - local_var_20);
uint16_t local_var_22 = 12;
bool local_var_23 = (local_var_21 == local_var_22);
auto local_var_24_shifted = AES_aes_counter >> 96;
auto local_var_24_mask = AES_aes_counter;
local_var_24_mask = (1 << (103 - 96 + 1)) - 1;
local_var_24_mask &= local_var_24_shifted;
uint8_t local_var_24 = boost::numeric_cast<uint8_t>(local_var_24_mask);
uint16_t local_var_25 = 65312;
uint16_t local_var_26 = (AES_cmdaddr - local_var_25);
uint16_t local_var_27 = 11;
bool local_var_28 = (local_var_26 == local_var_27);
auto local_var_29_shifted = AES_aes_counter >> 88;
auto local_var_29_mask = AES_aes_counter;
local_var_29_mask = (1 << (95 - 88 + 1)) - 1;
local_var_29_mask &= local_var_29_shifted;
uint8_t local_var_29 = boost::numeric_cast<uint8_t>(local_var_29_mask);
uint16_t local_var_30 = 65312;
uint16_t local_var_31 = (AES_cmdaddr - local_var_30);
uint16_t local_var_32 = 10;
bool local_var_33 = (local_var_31 == local_var_32);
auto local_var_34_shifted = AES_aes_counter >> 80;
auto local_var_34_mask = AES_aes_counter;
local_var_34_mask = (1 << (87 - 80 + 1)) - 1;
local_var_34_mask &= local_var_34_shifted;
uint8_t local_var_34 = boost::numeric_cast<uint8_t>(local_var_34_mask);
uint16_t local_var_35 = 65312;
uint16_t local_var_36 = (AES_cmdaddr - local_var_35);
uint16_t local_var_37 = 9;
bool local_var_38 = (local_var_36 == local_var_37);
auto local_var_39_shifted = AES_aes_counter >> 72;
auto local_var_39_mask = AES_aes_counter;
local_var_39_mask = (1 << (79 - 72 + 1)) - 1;
local_var_39_mask &= local_var_39_shifted;
uint8_t local_var_39 = boost::numeric_cast<uint8_t>(local_var_39_mask);
uint16_t local_var_40 = 65312;
uint16_t local_var_41 = (AES_cmdaddr - local_var_40);
uint16_t local_var_42 = 8;
bool local_var_43 = (local_var_41 == local_var_42);
auto local_var_44_shifted = AES_aes_counter >> 64;
auto local_var_44_mask = AES_aes_counter;
local_var_44_mask = (1 << (71 - 64 + 1)) - 1;
local_var_44_mask &= local_var_44_shifted;
uint8_t local_var_44 = boost::numeric_cast<uint8_t>(local_var_44_mask);
uint16_t local_var_45 = 65312;
uint16_t local_var_46 = (AES_cmdaddr - local_var_45);
uint16_t local_var_47 = 7;
bool local_var_48 = (local_var_46 == local_var_47);
auto local_var_49_shifted = AES_aes_counter >> 56;
auto local_var_49_mask = AES_aes_counter;
local_var_49_mask = (1 << (63 - 56 + 1)) - 1;
local_var_49_mask &= local_var_49_shifted;
uint8_t local_var_49 = boost::numeric_cast<uint8_t>(local_var_49_mask);
uint16_t local_var_50 = 65312;
uint16_t local_var_51 = (AES_cmdaddr - local_var_50);
uint16_t local_var_52 = 6;
bool local_var_53 = (local_var_51 == local_var_52);
auto local_var_54_shifted = AES_aes_counter >> 48;
auto local_var_54_mask = AES_aes_counter;
local_var_54_mask = (1 << (55 - 48 + 1)) - 1;
local_var_54_mask &= local_var_54_shifted;
uint8_t local_var_54 = boost::numeric_cast<uint8_t>(local_var_54_mask);
uint16_t local_var_55 = 65312;
uint16_t local_var_56 = (AES_cmdaddr - local_var_55);
uint16_t local_var_57 = 5;
bool local_var_58 = (local_var_56 == local_var_57);
auto local_var_59_shifted = AES_aes_counter >> 40;
auto local_var_59_mask = AES_aes_counter;
local_var_59_mask = (1 << (47 - 40 + 1)) - 1;
local_var_59_mask &= local_var_59_shifted;
uint8_t local_var_59 = boost::numeric_cast<uint8_t>(local_var_59_mask);
uint16_t local_var_60 = 65312;
uint16_t local_var_61 = (AES_cmdaddr - local_var_60);
uint16_t local_var_62 = 4;
bool local_var_63 = (local_var_61 == local_var_62);
auto local_var_64_shifted = AES_aes_counter >> 32;
auto local_var_64_mask = AES_aes_counter;
local_var_64_mask = (1 << (39 - 32 + 1)) - 1;
local_var_64_mask &= local_var_64_shifted;
uint8_t local_var_64 = boost::numeric_cast<uint8_t>(local_var_64_mask);
uint16_t local_var_65 = 65312;
uint16_t local_var_66 = (AES_cmdaddr - local_var_65);
uint16_t local_var_67 = 3;
bool local_var_68 = (local_var_66 == local_var_67);
auto local_var_69_shifted = AES_aes_counter >> 24;
auto local_var_69_mask = AES_aes_counter;
local_var_69_mask = (1 << (31 - 24 + 1)) - 1;
local_var_69_mask &= local_var_69_shifted;
uint8_t local_var_69 = boost::numeric_cast<uint8_t>(local_var_69_mask);
uint16_t local_var_70 = 65312;
uint16_t local_var_71 = (AES_cmdaddr - local_var_70);
uint16_t local_var_72 = 2;
bool local_var_73 = (local_var_71 == local_var_72);
auto local_var_74_shifted = AES_aes_counter >> 16;
auto local_var_74_mask = AES_aes_counter;
local_var_74_mask = (1 << (23 - 16 + 1)) - 1;
local_var_74_mask &= local_var_74_shifted;
uint8_t local_var_74 = boost::numeric_cast<uint8_t>(local_var_74_mask);
uint16_t local_var_75 = 65312;
uint16_t local_var_76 = (AES_cmdaddr - local_var_75);
uint16_t local_var_77 = 1;
bool local_var_78 = (local_var_76 == local_var_77);
auto local_var_79_shifted = AES_aes_counter >> 8;
auto local_var_79_mask = AES_aes_counter;
local_var_79_mask = (1 << (15 - 8 + 1)) - 1;
local_var_79_mask &= local_var_79_shifted;
uint8_t local_var_79 = boost::numeric_cast<uint8_t>(local_var_79_mask);
auto local_var_80_shifted = AES_aes_counter >> 0;
auto local_var_80_mask = AES_aes_counter;
local_var_80_mask = (1 << (7 - 0 + 1)) - 1;
local_var_80_mask &= local_var_80_shifted;
uint8_t local_var_80 = boost::numeric_cast<uint8_t>(local_var_80_mask);
auto local_var_81 = (local_var_78) ? local_var_79 : local_var_80;
auto local_var_82 = (local_var_73) ? local_var_74 : local_var_81;
auto local_var_83 = (local_var_68) ? local_var_69 : local_var_82;
auto local_var_84 = (local_var_63) ? local_var_64 : local_var_83;
auto local_var_85 = (local_var_58) ? local_var_59 : local_var_84;
auto local_var_86 = (local_var_53) ? local_var_54 : local_var_85;
auto local_var_87 = (local_var_48) ? local_var_49 : local_var_86;
auto local_var_88 = (local_var_43) ? local_var_44 : local_var_87;
auto local_var_89 = (local_var_38) ? local_var_39 : local_var_88;
auto local_var_90 = (local_var_33) ? local_var_34 : local_var_89;
auto local_var_91 = (local_var_28) ? local_var_29 : local_var_90;
auto local_var_92 = (local_var_23) ? local_var_24 : local_var_91;
auto local_var_93 = (local_var_18) ? local_var_19 : local_var_92;
auto local_var_94 = (local_var_13) ? local_var_14 : local_var_93;
auto local_var_95 = (local_var_7) ? local_var_9 : local_var_94;
auto local_var_95_nxt_holder = local_var_95;
AES_aes_address = AES_aes_address_nxt_holder;
AES_aes_key = AES_aes_key_nxt_holder;
AES_aes_length = AES_aes_length_nxt_holder;
AES_outdata = local_var_95_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "GET_STATUS state updates:" << std::endl;
instr_update_log << "    AES_aes_address => " << std::hex << "0x" << AES_aes_address << std::endl; 
instr_update_log << "    AES_aes_key => " << std::hex << "0x" << AES_aes_key << std::endl; 
instr_update_log << "    AES_aes_length => " << std::hex << "0x" << AES_aes_length << std::endl; 
instr_update_log << "    AES_outdata => " << std::hex << "0x" << AES_outdata << std::endl; 
instr_update_log << std::endl;
#endif
}
