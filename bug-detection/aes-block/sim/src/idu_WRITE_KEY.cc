#include <AES.h>
bool AES::decode_AES_WRITE_KEY() {
uint2_t local_var_1 = 2;
bool local_var_2 = (AES_cmd == local_var_1);
uint16_t local_var_4 = 65296;
bool local_var_5 = (AES_cmdaddr == local_var_4);
bool local_var_6 = (AES_cmdaddr > local_var_4);
bool local_var_7 = (local_var_5 | local_var_6);
bool local_var_8 = (local_var_2 & local_var_7);
uint16_t local_var_9 = 65312;
bool local_var_10 = (AES_cmdaddr < local_var_9);
bool local_var_11 = (local_var_8 & local_var_10);
auto& univ_var_31 = local_var_11;
return univ_var_31;
}
void AES::update_AES_WRITE_KEY() {
auto AES_aes_address_nxt_holder = AES_aes_address;
auto AES_aes_counter_nxt_holder = AES_aes_counter;
uint2_t local_var_3 = 0;
bool local_var_4 = (AES_aes_status == local_var_3);
uint16_t local_var_6 = 65296;
uint16_t local_var_7 = (AES_cmdaddr - local_var_6);
uint16_t local_var_8 = 15;
bool local_var_9 = (local_var_7 == local_var_8);
auto local_var_12_shifted = AES_aes_key >> 120;
auto local_var_12_mask = AES_aes_key;
local_var_12_mask = (1 << (127 - 120 + 1)) - 1;
local_var_12_mask &= local_var_12_shifted;
uint8_t local_var_12 = boost::numeric_cast<uint8_t>(local_var_12_mask);
auto local_var_13 = (local_var_9) ? AES_cmddata : local_var_12;
uint16_t local_var_14 = 65296;
uint16_t local_var_15 = (AES_cmdaddr - local_var_14);
uint16_t local_var_16 = 14;
bool local_var_17 = (local_var_15 == local_var_16);
auto local_var_18_shifted = AES_aes_key >> 112;
auto local_var_18_mask = AES_aes_key;
local_var_18_mask = (1 << (119 - 112 + 1)) - 1;
local_var_18_mask &= local_var_18_shifted;
uint8_t local_var_18 = boost::numeric_cast<uint8_t>(local_var_18_mask);
auto local_var_19 = (local_var_17) ? AES_cmddata : local_var_18;
uint16_t local_var_20 = 65296;
uint16_t local_var_21 = (AES_cmdaddr - local_var_20);
uint16_t local_var_22 = 13;
bool local_var_23 = (local_var_21 == local_var_22);
auto local_var_24_shifted = AES_aes_key >> 104;
auto local_var_24_mask = AES_aes_key;
local_var_24_mask = (1 << (111 - 104 + 1)) - 1;
local_var_24_mask &= local_var_24_shifted;
uint8_t local_var_24 = boost::numeric_cast<uint8_t>(local_var_24_mask);
auto local_var_25 = (local_var_23) ? AES_cmddata : local_var_24;
uint16_t local_var_26 = 65296;
uint16_t local_var_27 = (AES_cmdaddr - local_var_26);
uint16_t local_var_28 = 12;
bool local_var_29 = (local_var_27 == local_var_28);
auto local_var_30_shifted = AES_aes_key >> 96;
auto local_var_30_mask = AES_aes_key;
local_var_30_mask = (1 << (103 - 96 + 1)) - 1;
local_var_30_mask &= local_var_30_shifted;
uint8_t local_var_30 = boost::numeric_cast<uint8_t>(local_var_30_mask);
auto local_var_31 = (local_var_29) ? AES_cmddata : local_var_30;
uint16_t local_var_32 = 65296;
uint16_t local_var_33 = (AES_cmdaddr - local_var_32);
uint16_t local_var_34 = 11;
bool local_var_35 = (local_var_33 == local_var_34);
auto local_var_36_shifted = AES_aes_key >> 88;
auto local_var_36_mask = AES_aes_key;
local_var_36_mask = (1 << (95 - 88 + 1)) - 1;
local_var_36_mask &= local_var_36_shifted;
uint8_t local_var_36 = boost::numeric_cast<uint8_t>(local_var_36_mask);
auto local_var_37 = (local_var_35) ? AES_cmddata : local_var_36;
uint16_t local_var_38 = 65296;
uint16_t local_var_39 = (AES_cmdaddr - local_var_38);
uint16_t local_var_40 = 10;
bool local_var_41 = (local_var_39 == local_var_40);
auto local_var_42_shifted = AES_aes_key >> 80;
auto local_var_42_mask = AES_aes_key;
local_var_42_mask = (1 << (87 - 80 + 1)) - 1;
local_var_42_mask &= local_var_42_shifted;
uint8_t local_var_42 = boost::numeric_cast<uint8_t>(local_var_42_mask);
auto local_var_43 = (local_var_41) ? AES_cmddata : local_var_42;
uint16_t local_var_44 = 65296;
uint16_t local_var_45 = (AES_cmdaddr - local_var_44);
uint16_t local_var_46 = 9;
bool local_var_47 = (local_var_45 == local_var_46);
auto local_var_48_shifted = AES_aes_key >> 72;
auto local_var_48_mask = AES_aes_key;
local_var_48_mask = (1 << (79 - 72 + 1)) - 1;
local_var_48_mask &= local_var_48_shifted;
uint8_t local_var_48 = boost::numeric_cast<uint8_t>(local_var_48_mask);
auto local_var_49 = (local_var_47) ? AES_cmddata : local_var_48;
uint16_t local_var_50 = 65296;
uint16_t local_var_51 = (AES_cmdaddr - local_var_50);
uint16_t local_var_52 = 8;
bool local_var_53 = (local_var_51 == local_var_52);
auto local_var_54_shifted = AES_aes_key >> 64;
auto local_var_54_mask = AES_aes_key;
local_var_54_mask = (1 << (71 - 64 + 1)) - 1;
local_var_54_mask &= local_var_54_shifted;
uint8_t local_var_54 = boost::numeric_cast<uint8_t>(local_var_54_mask);
auto local_var_55 = (local_var_53) ? AES_cmddata : local_var_54;
uint16_t local_var_56 = 65296;
uint16_t local_var_57 = (AES_cmdaddr - local_var_56);
uint16_t local_var_58 = 7;
bool local_var_59 = (local_var_57 == local_var_58);
auto local_var_60_shifted = AES_aes_key >> 56;
auto local_var_60_mask = AES_aes_key;
local_var_60_mask = (1 << (63 - 56 + 1)) - 1;
local_var_60_mask &= local_var_60_shifted;
uint8_t local_var_60 = boost::numeric_cast<uint8_t>(local_var_60_mask);
auto local_var_61 = (local_var_59) ? AES_cmddata : local_var_60;
uint16_t local_var_62 = 65296;
uint16_t local_var_63 = (AES_cmdaddr - local_var_62);
uint16_t local_var_64 = 6;
bool local_var_65 = (local_var_63 == local_var_64);
auto local_var_66_shifted = AES_aes_key >> 48;
auto local_var_66_mask = AES_aes_key;
local_var_66_mask = (1 << (55 - 48 + 1)) - 1;
local_var_66_mask &= local_var_66_shifted;
uint8_t local_var_66 = boost::numeric_cast<uint8_t>(local_var_66_mask);
auto local_var_67 = (local_var_65) ? AES_cmddata : local_var_66;
uint16_t local_var_68 = 65296;
uint16_t local_var_69 = (AES_cmdaddr - local_var_68);
uint16_t local_var_70 = 5;
bool local_var_71 = (local_var_69 == local_var_70);
auto local_var_72_shifted = AES_aes_key >> 40;
auto local_var_72_mask = AES_aes_key;
local_var_72_mask = (1 << (47 - 40 + 1)) - 1;
local_var_72_mask &= local_var_72_shifted;
uint8_t local_var_72 = boost::numeric_cast<uint8_t>(local_var_72_mask);
auto local_var_73 = (local_var_71) ? AES_cmddata : local_var_72;
uint16_t local_var_74 = 65296;
uint16_t local_var_75 = (AES_cmdaddr - local_var_74);
uint16_t local_var_76 = 4;
bool local_var_77 = (local_var_75 == local_var_76);
auto local_var_78_shifted = AES_aes_key >> 32;
auto local_var_78_mask = AES_aes_key;
local_var_78_mask = (1 << (39 - 32 + 1)) - 1;
local_var_78_mask &= local_var_78_shifted;
uint8_t local_var_78 = boost::numeric_cast<uint8_t>(local_var_78_mask);
auto local_var_79 = (local_var_77) ? AES_cmddata : local_var_78;
uint16_t local_var_80 = 65296;
uint16_t local_var_81 = (AES_cmdaddr - local_var_80);
uint16_t local_var_82 = 3;
bool local_var_83 = (local_var_81 == local_var_82);
auto local_var_84_shifted = AES_aes_key >> 24;
auto local_var_84_mask = AES_aes_key;
local_var_84_mask = (1 << (31 - 24 + 1)) - 1;
local_var_84_mask &= local_var_84_shifted;
uint8_t local_var_84 = boost::numeric_cast<uint8_t>(local_var_84_mask);
auto local_var_85 = (local_var_83) ? AES_cmddata : local_var_84;
uint16_t local_var_86 = 65296;
uint16_t local_var_87 = (AES_cmdaddr - local_var_86);
uint16_t local_var_88 = 2;
bool local_var_89 = (local_var_87 == local_var_88);
auto local_var_90_shifted = AES_aes_key >> 16;
auto local_var_90_mask = AES_aes_key;
local_var_90_mask = (1 << (23 - 16 + 1)) - 1;
local_var_90_mask &= local_var_90_shifted;
uint8_t local_var_90 = boost::numeric_cast<uint8_t>(local_var_90_mask);
auto local_var_91 = (local_var_89) ? AES_cmddata : local_var_90;
uint16_t local_var_92 = 65296;
uint16_t local_var_93 = (AES_cmdaddr - local_var_92);
uint16_t local_var_94 = 1;
bool local_var_95 = (local_var_93 == local_var_94);
auto local_var_96_shifted = AES_aes_key >> 8;
auto local_var_96_mask = AES_aes_key;
local_var_96_mask = (1 << (15 - 8 + 1)) - 1;
local_var_96_mask &= local_var_96_shifted;
uint8_t local_var_96 = boost::numeric_cast<uint8_t>(local_var_96_mask);
auto local_var_97 = (local_var_95) ? AES_cmddata : local_var_96;
uint16_t local_var_98 = 65296;
uint16_t local_var_99 = (AES_cmdaddr - local_var_98);
uint16_t local_var_100 = 0;
bool local_var_101 = (local_var_99 == local_var_100);
auto local_var_102_shifted = AES_aes_key >> 0;
auto local_var_102_mask = AES_aes_key;
local_var_102_mask = (1 << (7 - 0 + 1)) - 1;
local_var_102_mask &= local_var_102_shifted;
uint8_t local_var_102 = boost::numeric_cast<uint8_t>(local_var_102_mask);
auto local_var_103 = (local_var_101) ? AES_cmddata : local_var_102;
univ_var_32 = (boost::numeric_cast<uint16_t>(local_var_97) << 8) + boost::numeric_cast<uint16_t>(local_var_103);
univ_var_33 = (boost::numeric_cast<uint24_t>(local_var_91) << 16) + boost::numeric_cast<uint24_t>(univ_var_32);
univ_var_34 = (boost::numeric_cast<uint32_t>(local_var_85) << 24) + boost::numeric_cast<uint32_t>(univ_var_33);
univ_var_35 = (boost::numeric_cast<uint40_t>(local_var_79) << 32) + boost::numeric_cast<uint40_t>(univ_var_34);
univ_var_36 = (boost::numeric_cast<uint48_t>(local_var_73) << 40) + boost::numeric_cast<uint48_t>(univ_var_35);
univ_var_37 = (boost::numeric_cast<uint56_t>(local_var_67) << 48) + boost::numeric_cast<uint56_t>(univ_var_36);
univ_var_38 = (boost::numeric_cast<uint64_t>(local_var_61) << 56) + boost::numeric_cast<uint64_t>(univ_var_37);
univ_var_39 = (boost::numeric_cast<uint72_t>(local_var_55) << 64) + boost::numeric_cast<uint72_t>(univ_var_38);
univ_var_40 = (boost::numeric_cast<uint80_t>(local_var_49) << 72) + boost::numeric_cast<uint80_t>(univ_var_39);
univ_var_41 = (boost::numeric_cast<uint88_t>(local_var_43) << 80) + boost::numeric_cast<uint88_t>(univ_var_40);
univ_var_42 = (boost::numeric_cast<uint96_t>(local_var_37) << 88) + boost::numeric_cast<uint96_t>(univ_var_41);
univ_var_43 = (boost::numeric_cast<uint104_t>(local_var_31) << 96) + boost::numeric_cast<uint104_t>(univ_var_42);
univ_var_44 = (boost::numeric_cast<uint112_t>(local_var_25) << 104) + boost::numeric_cast<uint112_t>(univ_var_43);
univ_var_45 = (boost::numeric_cast<uint120_t>(local_var_19) << 112) + boost::numeric_cast<uint120_t>(univ_var_44);
univ_var_46 = (boost::numeric_cast<uint128_t>(local_var_13) << 120) + boost::numeric_cast<uint128_t>(univ_var_45);
auto local_var_119 = (local_var_4) ? univ_var_46 : AES_aes_key;
auto local_var_119_nxt_holder = local_var_119;
auto AES_aes_length_nxt_holder = AES_aes_length;
AES_aes_address = AES_aes_address_nxt_holder;
AES_aes_counter = AES_aes_counter_nxt_holder;
AES_aes_key = local_var_119_nxt_holder;
AES_aes_length = AES_aes_length_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "WRITE_KEY state updates:" << std::endl;
instr_update_log << "    AES_aes_address => " << std::hex << "0x" << AES_aes_address << std::endl; 
instr_update_log << "    AES_aes_counter => " << std::hex << "0x" << AES_aes_counter << std::endl; 
instr_update_log << "    AES_aes_key => " << std::hex << "0x" << AES_aes_key << std::endl; 
instr_update_log << "    AES_aes_length => " << std::hex << "0x" << AES_aes_length << std::endl; 
instr_update_log << std::endl;
#endif
}
